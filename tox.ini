# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static-{charm,lib}, unit

[vars]
src_path = {toxinidir}/src
tst_path = {toxinidir}/tests
lib_path = {toxinidir}/lib/charms/s3proxy_k8s
all_path =
  {[vars]src_path}
  {[vars]lib_path}
  {[vars]tst_path}

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    # flake8-copyright is currently broken
    # flake8-copyright
    flake8-docstrings
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
    codespell
commands =
    # uncomment the following line if this charm owns a lib
    codespell {[vars]lib_path}
    codespell --skip .git --skip .tox --skip build --skip lib --skip venv* \
      --skip icon.svg --skip .mypy_cache
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:static-{charm,lib}]
description = Run static analysis checks
deps =
    pyright
    -r{toxinidir}/requirements.txt
commands =
    charm: pyright --pythonversion 3.8 {[vars]src_path}
    lib: pyright --pythonversion 3.8 {[vars]lib_path}


[testenv:unit]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    -r{toxinidir}/requirements.txt
commands =
    coverage run \
      --source={[vars]src_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/unit
    coverage report

[testenv:scenario]
description = Scenario tests
deps =
    coverage[toml]
    pytest
    -r{toxinidir}/requirements.txt
commands =
    coverage run \
      --source={[vars]src_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/scenario
    coverage report

[testenv:integration]
description = Run integration tests
deps =
    asyncstdlib
    pytest
    juju
    pytest-operator
    boto3
    -r{toxinidir}/requirements.txt
commands =
    pytest -vv --tb native --log-cli-level=INFO --color=yes -s {posargs} {[vars]tst_path}/integration
